column_names = names(train_data)
column_names
x = list()
ggplot_y_x = list()
par(mfrow=c(2,2))
for (i in column_names)
{
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) +
geom_point(shape=18, color="blue")+
geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
ggplot_y_x
}
for (i in column_names)
{
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) +
geom_point(shape=18, color="blue")+
geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
print(ggplot_y_x)
}
ggplot(train_data, aes(x=Median_Rainfall, y=EQ)) +
geom_point(shape=18, color="blue")+
geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
column_names
for (i in column_names)
{
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) +
geom_point(shape=18, color="blue")+
geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
print(ggplot_y_x)
}
ggplot_y_x = list()
for (i in column_names)
{
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) +
geom_point(shape=18, color="blue")+
geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
ggplot_y_x
}
for (i in column_names)
{
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) +
geom_point(shape=18, color="blue")+
geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
ggplot_y_x
}
ccf_v = list()
for (i in column_names)
{
print(i)
# ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
#               geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
# ggplot_y_x
}
ggplot_y_x = ggplot(train_data, aes(x= Social_Search_Impressions, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
ggplot(train_data, aes(x= Social_Search_Impressions, y=EQ)) +
geom_point(shape=18, color="blue") +
geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
for (i in column_names)
{
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
print(ggplot_y_x)
}
for (i in column_names)
{
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
print(ggplot_y_x)
column_names = names(train_data)
for (i in column_names)
{
print(i)
# ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
#               geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
ggplot(train_data, aes(x= "Social_Search_Impressions", y=EQ)) +
geom_point(shape=18, color="blue") +
geom_smooth(method=lm,  linetype="dashed", color="darkred", fill="blue")
print(column_names)
column_names_1 = as.data.frame(column_names)
View(column_names_1)
print(column_names_1)
for (i in column_names_1)
{
print(i)
# ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
#               geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
for (i in column_names_1)
{
#print(i)
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
print(ggplot_y_x)
for (i in len(column_names_1))
{
#print(i)
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
print(ggplot_y_x)
for (i in nrow(column_names_1))
{
print(i)
# ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
#                geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
print(length(column_names_1))
print(nrow(column_names_1))
for (i in 0:nrow(column_names_1))
{
print(i)
# ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
#                geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
for (i in 0:nrow(column_names_1))
{
print(column_names_1[i])
# ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
#                geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
for (i in 0:nrow(column_names_1))
{
#print(column_names_1[i])
ggplot_y_x = ggplot(train_data, aes(x=column_names_1[i], y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
print(ggplot_y_x)
for (i in 0:nrow(column_names_1))
{
print(column_names_1[i])
ggplot_y_x = ggplot(train_data, aes(x=column_names_1[i], y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
for (i in 0:nrow(column_names_1))
{
print(column_names_1[i])
ggplot_y_x = ggplot(train_data, aes(x=column_names_1[,i], y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
for (i in 0:nrow(column_names_1))
{
print(column_names_1[i])
ggplot_y_x = ggplot(train_data, aes(x=column_names_1$i, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
for (i in 0:nrow(column_names_1))
{
print(column_names_1[i])
b = column_names_1[i]
ggplot_y_x = ggplot(train_data, aes(x=b, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
nunique = unique(column_names)
nunique
for (i in nunique)
{
print(i)
ggplot_y_x = ggplot(train_data, aes(x=i, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
print(ggplot_y_x)
for (i in column_names_1)
{
print(column_names_1[i])
ggplot_y_x = ggplot(train_data, aes(x= i, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
print(ggplot_y_x)
plot_c = list()
plot_c = list()
for (i in column_names)
{
plot_c = plot(EQ ~ i, data = train_data)#,xlab="freq",ylab="temp")
# abline(lm(EQ ~ i, data = train_data), col="red")
# dev.off()
print(plot_c)
}
for (i in column_names)
{
print(i)
# plot_c = plot(EQ ~ i, data = train_data)#,xlab="freq",ylab="temp")
# abline(lm(EQ ~ i, data = train_data), col="red")
# dev.off()
print(plot_c)
}
plot_c = list()
for (i in column_names)
{
print(i)
data1 <- train_data[train_data[,1] == i, ]
plot(EQ ~ i, data = data1)#,xlab="freq",ylab="temp")
# plot_c = plot(EQ ~ i, data = train_data)#,xlab="freq",ylab="temp")
# abline(lm(EQ ~ i, data = train_data), col="red")
# dev.off()
# print(plot_c)
}
View(data1)
for (i in column_names_1)
{
print(column_names_1[i])
ggplot_y_x = ggplot(train_data, aes(x= i, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
print(ggplot_y_x)
for (i in column_names_1)
{
print(column_names_1[i])
ggplot_y_x = ggplot(train_data, aes(x= i, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
print(ggplot_y_x)
column_names_1 = as.data.frame(column_names)
column_names_1 = as.data.frame(column_names)
print(column_names_1)
column_names_1 = as.data.frame(column_names)
print(nrow(column_names_1))
for (i in nrow(column_names_1))
{
print(column_names_1[i])
# ggplot_y_x = ggplot(train_data, aes(x= i, y=EQ)) + geom_point(shape=18, color="blue") +
#               geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
for (i in nrow(column_names_1))
{
print(column_names_1[i,])
# ggplot_y_x = ggplot(train_data, aes(x= i, y=EQ)) + geom_point(shape=18, color="blue") +
#               geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
}
for (i in nrow(column_names_1))
{
print(column_names_1[i,])
ggplot_y_x = ggplot(train_data, aes(x= column_names_1[i,], y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
print(ggplot_y_x)
}
for (i in nrow(column_names_1))
{
b <- column_names_1[i,]
print(b)
# ggplot_y_x = ggplot(train_data, aes(x= column_names_1[i,], y=EQ)) + geom_point(shape=18, color="blue") +
#                geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
for (i in nrow(column_names_1))
{
b <- column_names_1[i,]
print(b)
ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
print(ggplot_y_x)
}
for (i in nrow(column_names_1))
{
b <- column_names_1[i,]
print(b)
ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
print(ggplot_y_x)
}
y_1 <- slide(y1, "EQ", NewVar = "yLag1", slideBy = 1)  # create lag1 variable
library(reshape)
library(reshape)
library(reshape)
for (i in nrow(column_names_1))
{
xymelt <- melt(column_names_1[i,], id.vars = "b")
print(b)
# ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
for (i in nrow(column_names_1))
{
xymelt <- melt(column_names_1[i,], id.vars = "b")
print("hello")
print(b)
print("bye")
# ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
for (i in nrow(column_names_1))
{
xymelt <- melt(column_names_1[i], id.vars = "b")
print("hello")
print(b)
print("bye")
# ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
for (i in nrow(column_names_1))
{
xymelt <- melt(column_names_1[i,], id.vars = "b")
print("hello")
print(b)
print("bye")
# ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
library(reshape2)
for (i in nrow(column_names_1))
{
xymelt <- melt(column_names_1[i,], id.vars = "b")
print("hello")
print(b)
print("bye")
# ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
for (i in 1:nrow(column_names_1))
{
xymelt <- melt(column_names_1[i,], id.vars = "b")
print("hello")
print(b)
print("bye")
# ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
for (i in 1:nrow(column_names_1))
{
xymelt <- melt(column_names_1[i,], id.vars = "b")
print("hello")
print(column_names_1[i])
print("bye")
# ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
count = 0
for (i in 1:nrow(column_names_1))
{
if(count==0):
print("hello")
print(column_names_1[i])
count = count + 1
else:
print("bye")
# ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
count = 0
for (i in 1:nrow(column_names_1))
{
if(count==0){
print("hello")
print(column_names_1[i])
count = count + 1
}
else {
print("bye")
}
# ggplot_y_x = ggplot(train_data, aes(x= b, y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
}
count = 0
for (i in 1:nrow(column_names_1))
{
if(count==0){
print("hello")
print(column_names_1[i])
ggplot_y_x = ggplot(train_data, aes(x=column_names_1[i], y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
print(ggplot_y_x)
count = count + 1
}
else {
print("bye")
}
#
}
count = 0
for (i in 1:nrow(column_names_1))
{
if(count==0){
print("hello")
print(column_names_1[i]$column_names)
# ggplot_y_x = ggplot(train_data, aes(x=column_names_1[i], y=EQ)) + geom_point(shape=18, color="blue") +
#                 geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
# print(ggplot_y_x)
count = count + 1
}
else {
print("bye")
}
#
}
count = 0
for (i in 1:nrow(column_names_1))
{
if(count==0){
print("hello")
print(column_names_1[i]$column_names)
ggplot_y_x = ggplot(train_data, aes(x=column_names_1[i]$column_names, y=EQ)) + geom_point(shape=18, color="blue") +
geom_smooth(method=lm, linetype="dashed", color="darkred", fill="blue")
print(ggplot_y_x)
count = count + 1
}
else {
print("bye")
}
#
}
test_data_from_test = read.csv("test_data_bsts_import_test_div")
setwd("C:\\Users\\anchhabra\\Desktop\\Check_case_study\\Lag_check")
test_data_from_test = read.csv("test_data_bsts_import_test_div")
setwd("C:\\Users\\anchhabra\\Desktop\\Check_case_study\\Lag_check")
test_data_from_test = read.csv("test_data_bsts_import_test_div.csv")
head(train_data)
library("fUnitRoots")
urkpssTest(train_data, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
head(train_data_1)
trian_data_ts = ts(train_data)
urkpssTest(train_data, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
trian_data_EQ = ts(train_data$EQ)
urkpssTest(trian_data_EQ, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
tsstationary = diff(trian_data_EQ, differences=1)
plot(tsstationary)
fitARIMA <- arima(trian_data_EQ, order=c(1,0,1),seasonal = list(order = c(1,0,0), period = 13),method="ML")
library(lmtest)
coeftest(fitARIMA)
timeseriesseasonallyadjusted <- trian_data_EQ- timeseriescomponents$seasonal
components.ts = decompose(trian_data_EQ)
trian_data_EQ = ts(train_data$EQ, start = c(1983,1), frequency = 13)
components.ts = decompose(trian_data_EQ)
plot(components.ts)
fitARIMA <- arima(trian_data_EQ, order=c(1,0,1),seasonal = list(order = c(1,0,0), period = 13),method="ML")
coeftest(fitARIMA)
summary(fitARIMA)
fitARIMA
coeftest(fitARIMA)
confint(fitARIMA)
library(knitr)
library(dplyr)
library(data.table)
library(ggplot2)
library(tidyverse)
library(stats)
library(astsa)
library(bsts)
library(magrittr)
setwd("C:\\Users\\anchhabra\\Desktop\\Check_case_study\\Lag_check")
getwd()
setwd("C:\\Users\\anchhabra\\Desktop\\Check_case_study\\Lag_check")
train_data_raw = read.csv("Training_Data.csv")
View(train_data_raw)
test_data = read.csv("test_data.csv")
train_data_raw  = train_data_raw %>% mutate(quantile = ntile(Day,429))
View(train_data_raw)
train_data_summarized = train_data_raw %>% group_by(quantile) %>% summarise_each(funs(mean))
train_data_summarized = as.data.frame(train_data_summarized)
p = ggplot(data = train_data_summarized, aes(x = quantile, y = EQ)) +
geom_line(color = "#00AFBB", size = 1)
p
View(train_data_summarized)
p = ggplot(data = train_data_summarized, aes(x = quantile, y = EQ)) +
geom_line(color = "#00AFBB", size = 1)
q = p + stat_smooth(
color = "#FC4E07", fill = "#FC4E07",
method = "loess")
q + ggtitle("Sales over time") +
xlab("Time Periods") + ylab("Sales")
q
theme_update(plot.title = element_text(hjust = 0.5))
p = ggplot(data = train_data_summarized, aes(x = quantile, y = EQ)) +
geom_line(color = "#00AFBB", size = 1)
q = p + stat_smooth(
color = "#FC4E07", fill = "#FC4E07",
method = "loess")
q + ggtitle("Sales over time") +
xlab("Time Periods") + ylab("Sales")
q
eq_data = train_data_summarized['EQ']
View(eq_data)
class(eq_data)
tsData = ts(eq_data, start = c(1983,1), frequency = 13)
View(tsData)
components.ts = decompose(tsData)
plot(components.ts)
library("fUnitRoots")
urkpssTest(tsData, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
tsstationary = diff(tsData, differences=1)
plot(tsstationary)
acf(tsData,lag.max=34) Copy
acf(tsData,lag.max=34)
timeseriesseasonallyadjusted <- tsData- timeseriescomponents$seasonal
tsstationary <- diff(timeseriesseasonallyadjusted, differences=1)
timeseriesseasonallyadjusted <- tsData- components.ts$seasonal
tsstationary <- diff(timeseriesseasonallyadjusted, differences=1)
fitARIMA <- arima(tsData, order=c(1,1,1),seasonal = list(order = c(1,0,0), period = 12),method="ML")
library(lmtest)
coeftest(fitARIMA)
tsData = ts(eq_data, start = c(1983,1), frequency = 13)
auto.arima(tsData, trace=TRUE)
library(forecast)
auto.arima(tsData, trace=TRUE)
predict(fitARIMA,n.ahead = 5)
futurVal <- forecast.Arima(fitARIMA,h=10, level=c(99.5))
library(forecast)
futurVal <- forecast.Arima(fitARIMA,h=10, level=c(99.5))
futurVal <- forecast(fitARIMA,h=10, level=c(99.5))
plot.forecast(futurVal)
plot(futurVal)
